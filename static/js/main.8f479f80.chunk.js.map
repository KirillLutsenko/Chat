{"version":3,"sources":["AppStyles.js","components/CheckboxBlock.jsx","api.js","components/Chats/CommonElements/MessagesList.jsx","helpers.js","components/Chats/ChatWithGetMethod/SendFormForGet.jsx","components/Chats/ChatWithGetMethod/ChatWithGetMethod.jsx","components/Chats/ChatWithPostMethod/SendFormForPost.jsx","components/Chats/ChatWithPostMethod/ChatWithPostMethod.jsx","components/LoginForm.jsx","components/QueryMethods.jsx","App.jsx","index.js"],"names":["Button","styled","button","LoginPage","div","LoginFormWrapper","form","LoginInput","input","LoginButton","QueryMethodsWrapper","GetMethod","PostMethod","ChatBody","MessagesArea","CheckboxWrapper","Online","p","Offline","Checkbox","Messages","MyMessages","OtherMessages","UserName","MessageText","pre","DispatchTime","SendFormWrapper","TextArea","textarea","SendButton","CheckboxBlock","switchStatus","checkboxStatus","type","name","onChange","BASE_URL","MessagesList","id","messages","setMessages","signal","useEffect","fetch","then","res","ok","Error","status","statusText","json","addConnection","map","message","index","time","Date","getTime","username","sendHelperForGetRequest","userName","messageValue","setMessageValue","method","redirect","response","text","result","catch","error","console","warn","addMessage","toLocaleTimeString","sendHelperForPostRequest","headers","body","JSON","stringify","addMessageWithPostMethod","SendFormForGet","useState","placeholder","cols","rows","value","e","target","onKeyPress","shiftKey","key","trim","preventDefault","handleKeyPressForSend","wrap","disabled","onClick","ChatWithGetMethod","setCheckboxStatus","messagesRef","useRef","controller","AbortController","current","scrollTo","abort","ref","SendFormForPost","ChatWithPostMethod","LoginForm","setUserName","nameValue","setNameValue","checkIn","to","QueryMethods","App","refId","uniqueNumber","Math","round","random","toString","getUniqueID","path","Global","createGlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f479f80.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Button = styled.button`\n  margin-top: 5px;\n  padding: 5px 15px;\n  border-radius: 5px;\n  border: 2px solid #39dbaa;\n  background: #fff;\n  font-weight: 600;\n  cursor: pointer;\n  color: #39dbaa;\n  transition: color 0.2s ease, background 0.3s ease;\n\n  &:hover {\n    background: #39dbaa;\n    color: #fff;\n  }\n`;\n\n//App styled components\n\nexport const LoginPage = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n\n//LoginForm styled components\n\nexport const LoginFormWrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const LoginInput = styled.input`\n  padding: 5px;\n  width: 120px;\n  height: 30px;\n  font-size: 12px;\n  outline: none;\n  border: 2px solid #39dbaa;\n  border-radius: 5px;\n`;\n\nexport const LoginButton = styled(Button)`\n  width: 120px;\n`;\n\n//QueryMethods\n\nexport const QueryMethodsWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n`\n\nexport const GetMethod = styled(Button)`\n  margin: 0 10px;\n  text-transform: uppercase;\n  font-size: 12px;\n`\nexport const PostMethod = styled(GetMethod)``\n\n//Chat styled components\n\nexport const ChatBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const MessagesArea = styled.div`\n  margin-top: 20px;\n  width: 400px;\n  height: 300px;\n  background: rgb(57, 219, 170, 0.4);\n  border-radius: 5px;\n  overflow: auto;\n  @media (max-width: 415px) {\n    width: 300px;\n    height: 250px;\n  }\n\n  &::-webkit-scrollbar { width: 5px;}\n  &::-webkit-scrollbar-button {  background-color: #04c98a; border-radius: 5px; }\n  &::-webkit-scrollbar-track-piece { background-color: #c6c6c6;}\n  &::-webkit-scrollbar-thumb { height: 30px; background-color: #04c98a; border-radius: 5px;}\n`;\n\n//CheckboxBlock styled components\n\nexport const CheckboxWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 10px;\n  width: 400px;\n\n  @media (max-width: 415px) {\n    width: 300px;\n  }\n`;\n\nexport const Online = styled.p`\n  color: #04c98a;\n`;\n\nexport const Offline = styled(Online)`\n  color: #c6c6c6;\n`;\n\nexport const Checkbox = styled.input`\n  position: relative;\n  width: 40px;\n  height: 20px;\n  appearance: none;\n  background: rgb(57, 219, 170, 0.4);\n  outline: none;\n  border-radius: 20px;\n  box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);\n  cursor: pointer;\n  transition: background 0.3s ease;\n\n  &:checked {\n    background: #c6c6c6;\n  }\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 20px;\n    height: 20px;\n    border-radius: 20px;\n    background: #04c98a;\n    transform: scale(1.05);\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.4);\n    transition: 0.3s;\n  }\n\n  &:checked:before {\n    right: 20px;\n  }\n`;\n\nexport const CheckboxField = styled.div`\n  position: relative;\n  width: 40px;\n  height: 20px;\n  background: rgb(57, 219, 170, 0.4);\n  border-radius: 20px;\n  box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);\n  cursor: pointer;\n  transition: background 0.3s ease;\n`\n\nexport const CheckboxSlider= styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 20px;\n  height: 20px;\n  border-radius: 20px;\n  background: #04c98a;\n  transform: scale(1.05);\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.4);\n`\n\n//MessagesList styled components\n\nexport const Messages = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 15px;\n`;\n\nexport const MyMessages = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n`;\n\nexport const OtherMessages = styled(MyMessages)`\n  align-items: flex-start;\n`;\n\nexport const UserName = styled.p`\n  font-size: 12px;\n  font-weight: 400;\n  color: rgb(61, 55, 55, 0.6)\n`;\n\nexport const MessageText = styled.pre`\n  padding: 5px 15px;\n  margin-bottom: 2px;\n  font-style: italic;\n  border-radius: 5px;\n  background: #fff;\n  word-break: break-all;\n  color: rgb(61, 55, 55)\n`;\n\n\nexport const DispatchTime = styled.div`\n  display: flex;\n  align-items: flex-end;\n  margin-bottom: 5px;\n  font-size: 9px;\n  color: rgb(61, 55, 55, 0.6)\n`;\n\n//SendForm styled components\n\nexport const SendFormWrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  margin-top: 5px;\n`;\n\nexport const TextArea = styled.textarea`\n  padding: 5px;\n  width: 400px;\n  border: 1px solid #39dbaa;\n  border-radius: 5px;\n  resize: none;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:disabled {\n    border-color: #c6c6c6;\n  }\n\n  @media (max-width: 415px) {\n    width: 300px;\n  }\n`;\n\nexport const SendButton = styled(Button)`\n  margin-top: 5px;\n\n  &:disabled {\n    color: #c6c6c6;\n    border-color: #c6c6c6;\n  }\n`;\n","import React from 'react';\nimport { CheckboxWrapper, Checkbox, Online, Offline, } from 'AppStyles'\n\nexport const CheckboxBlock = ({ switchStatus, checkboxStatus }) => {\n  return (\n    <CheckboxWrapper>\n      <Checkbox\n        type=\"checkbox\"\n        name=\"switcher\"\n        onChange={switchStatus}\n      />\n      {\n        checkboxStatus\n          ? <Online>Online</Online> \n          : <Offline>Offline</Offline>\n      }\n\n      {/* <CheckboxOnJs /> */}\n    </CheckboxWrapper>\n  )\n}\n","export const BASE_URL = 'https://cryptic-sea-94299.herokuapp.com';\n\nexport const addConnection = (signal) => {\n  return fetch(`${BASE_URL}/connect`, { signal })\n  .then(res => {\n    if (!res.ok) {\n      throw new Error(`${res.status} - ${res.statusText}`);\n    }\n\n    return res.json();\n  })\n  .then(res => res)\n}\n\nexport const addMessage = (userName, messageValue, time, id) => {\n  const requestOptions = {\n    method: 'GET',\n    redirect: 'follow'\n  };\n\n  fetch(`${BASE_URL}/getmessage?username=${userName}&message=${messageValue}&time=${time}&id=${id}`, requestOptions)\n  .then(response => response.text())\n  .then(result => result)\n  .catch(error => {\n    console.warn('Error:', error);\n  });\n}\n\nexport const addMessageWithPostMethod = (userName, messageValue, time, id) => {\n  fetch(`${BASE_URL}/postmessage`, {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    },\n    body: JSON.stringify({\n      username: userName,\n      message: messageValue,\n      time: time,\n      id: id\n    }),\n  })\n  .then(response => response.text())\n  .then(result => result)\n  .catch(error => {\n    console.warn('Error:', error);\n  });\n}\n","import React, { useEffect } from 'react';\nimport { addConnection } from 'api';\nimport {\n  Messages,\n  MyMessages,\n  MessageText,\n  DispatchTime,\n  OtherMessages,\n  UserName\n} from 'AppStyles';\n\nexport const MessagesList = ({ id, messages, setMessages, checkboxStatus, signal }) => {\n  useEffect(() => {\n    if (checkboxStatus) {\n      addConnection(signal)\n        .then(res => setMessages([...messages, res]));\n    }\n  }, [messages, setMessages, checkboxStatus, signal])\n\n  return(\n    <Messages>\n      {messages.map((message, index) => (\n        (message.id === id) ? (\n          <MyMessages key={`Key-${index}-${new Date(message.time).getTime()}`}>\n            <UserName>{'You:'}</UserName>\n            <MessageText>{message.message}</MessageText>\n            <DispatchTime>{message.time}</DispatchTime>\n          </MyMessages>\n        ) : (\n          <OtherMessages key={`Key-${index}-${new Date(message.time).getTime()}`}>\n            <UserName>{`${message.username}:`}</UserName>\n            <MessageText>{message.message}</MessageText>\n            <DispatchTime>{message.time}</DispatchTime>\n          </OtherMessages>\n        )\n      ))}\n    </Messages>\n  )\n}","import { addMessage, addMessageWithPostMethod } from 'api';\n\nexport const sendHelperForGetRequest = (userName, messageValue, id, setMessageValue) => {\n  addMessage(userName, messageValue, new Date().toLocaleTimeString(), id);\n  setMessageValue('');\n}\n\nexport const sendHelperForPostRequest = (userName, messageValue, id, setMessageValue) => {\n  addMessageWithPostMethod(userName, messageValue, new Date().toLocaleTimeString(), id);\n  setMessageValue('');\n}\n\nexport const getUniqueID = () => {\n  let uniqueNumber = Math.round(Math.random() * 1000000 + 100000);\n  let time = new Date().getTime();\n\n  return uniqueNumber.toString() + '-' + time.toString();\n}\n","import React, { useState } from 'react';\nimport { SendButton, SendFormWrapper, TextArea } from 'AppStyles';\nimport { sendHelperForGetRequest } from 'helpers';\n\nexport const SendFormForGet = ({ userName, id, checkboxStatus }) => {\n  const [messageValue, setMessageValue] = useState('');\n\n  const handleKeyPressForSend = (e) => {\n    if (!e.shiftKey && e.key === 'Enter' && messageValue.trim()) {\n      e.preventDefault();\n      sendHelperForGetRequest(userName, messageValue, id, setMessageValue);\n    }\n  }\n\n  const sendMessage = () => {\n    if (messageValue) {\n      sendHelperForGetRequest(userName, messageValue, id, setMessageValue);\n    }\n  }\n\n  return (\n    <SendFormWrapper >\n      <TextArea\n        placeholder=\"Enter your message\"\n        id=\"textarea\"\n        cols=\"45\"\n        rows=\"3\"\n        value={messageValue}\n        onChange={e => setMessageValue(e.target.value)}\n        onKeyPress={e => handleKeyPressForSend(e)}\n        wrap=\"soft\"\n        disabled={!checkboxStatus}\n      />\n      <SendButton\n        type=\"button\"\n        onClick={sendMessage}\n        disabled={!checkboxStatus}\n      >\n        Send\n      </SendButton>\n    </SendFormWrapper>\n  )\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport { ChatBody, MessagesArea } from 'AppStyles';\nimport { CheckboxBlock } from 'components/CheckboxBlock';\nimport { MessagesList } from 'components/Chats/CommonElements/MessagesList';\nimport { SendFormForGet } from 'components/Chats/ChatWithGetMethod/SendFormForGet'\n\nexport const ChatWithGetMethod = ({ userName, id }) => {\n  const [checkboxStatus, setCheckboxStatus] = useState(true);\n  const [messages, setMessages] = useState([]);\n  const messagesRef = useRef(null);\n  const controller = new AbortController();\n  const signal = controller.signal;\n\n\n  useEffect(() => {\n    messagesRef.current.scrollTo(0, 99999);\n  },[messages])\n\n  const switchStatus = () => {\n    setCheckboxStatus(!checkboxStatus);\n    controller.abort();\n  }\n\n  return (\n    <ChatBody>\n      <CheckboxBlock\n        switchStatus={switchStatus}\n        checkboxStatus={checkboxStatus}\n      />\n\n      <MessagesArea ref={messagesRef}>\n        <MessagesList\n          id={id}\n          messages={messages}\n          setMessages={setMessages}\n          checkboxStatus={checkboxStatus}\n          signal={signal}\n        />\n      </MessagesArea>\n\n      <SendFormForGet\n        userName={userName}\n        id={id}\n        checkboxStatus={checkboxStatus}\n      />\n    </ChatBody>\n  )\n}\n","import React, { useState } from 'react';\nimport { SendButton, SendFormWrapper, TextArea } from 'AppStyles';\nimport { sendHelperForPostRequest } from 'helpers';\n\nexport const SendFormForPost = ({ userName, id, checkboxStatus }) => {\n  const [messageValue, setMessageValue] = useState('');\n\n  const handleKeyPressForSend = (e) => {\n    if (!e.shiftKey && e.key === 'Enter' && messageValue.trim()) {\n      e.preventDefault();\n      sendHelperForPostRequest(userName, messageValue, id, setMessageValue);\n    }\n  }\n\n  const sendMessage = () => {\n    if (messageValue) {\n      sendHelperForPostRequest(userName, messageValue, id, setMessageValue);\n    }\n  }\n\n  return (\n    <SendFormWrapper >\n      <TextArea\n        placeholder=\"Enter your message\"\n        id=\"textarea\"\n        cols=\"45\"\n        rows=\"3\"\n        value={messageValue}\n        onChange={e => setMessageValue(e.target.value)}\n        onKeyPress={e => handleKeyPressForSend(e)}\n        wrap=\"soft\"\n        disabled={!checkboxStatus}\n      />\n      <SendButton\n        type=\"button\"\n        onClick={sendMessage}\n        disabled={!checkboxStatus}\n      >\n        Send\n      </SendButton>\n    </SendFormWrapper>\n  )\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport { ChatBody, MessagesArea } from 'AppStyles';\nimport { CheckboxBlock } from 'components/CheckboxBlock';\nimport { MessagesList } from 'components/Chats/CommonElements/MessagesList';\nimport { SendFormForPost } from 'components/Chats/ChatWithPostMethod/SendFormForPost'\n\nexport const ChatWithPostMethod = ({ userName, id }) => {\n  const [checkboxStatus, setCheckboxStatus] = useState(true);\n  const [messages, setMessages] = useState([]);\n  const messagesRef = useRef(null);\n  const controller = new AbortController();\n  const signal = controller.signal;\n\n\n  useEffect(() => {\n    messagesRef.current.scrollTo(0, 99999);\n  },[messages])\n\n  const switchStatus = () => {\n    setCheckboxStatus(!checkboxStatus);\n    controller.abort();\n  }\n\n  return (\n    <ChatBody>\n      <CheckboxBlock\n        switchStatus={switchStatus}\n        checkboxStatus={checkboxStatus}\n      />\n\n      <MessagesArea ref={messagesRef}>\n        <MessagesList\n          id={id}\n          messages={messages}\n          setMessages={setMessages}\n          checkboxStatus={checkboxStatus}\n          signal={signal}\n        />\n      </MessagesArea>\n\n      <SendFormForPost\n        userName={userName}\n        id={id}\n        checkboxStatus={checkboxStatus}\n      />\n    </ChatBody>\n  )\n}\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { LoginButton, LoginFormWrapper, LoginInput } from 'AppStyles';\n\nexport const LoginForm = ({ setUserName }) => {\n  const [nameValue, setNameValue] = useState('');\n\n  const checkIn = () => {\n    setUserName(nameValue);\n  }\n\n  return (\n    <LoginFormWrapper>\n      <LoginInput\n        type=\"text\"\n        placeholder=\"Enter your name\"\n        value={nameValue}\n        onChange={e => setNameValue(e.target.value)}\n      />\n      {nameValue ? (\n        <Link\n          to={'/querymethods'}\n        >\n          <LoginButton\n            type=\"button\"\n            onClick={checkIn}\n          >\n            Log in\n          </LoginButton>\n        </Link>\n      ) : (\n        <LoginButton\n          type=\"button\"\n          onClick={checkIn}\n        >\n          Log in\n        </LoginButton>\n      )}\n    </LoginFormWrapper>\n  )\n}\n","import { GetMethod, PostMethod, QueryMethodsWrapper } from 'AppStyles';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const QueryMethods = () => {\n  return (\n    <QueryMethodsWrapper>\n      <Link\n          to={'/chatwithgetmethod'}\n        >\n        <GetMethod>Get query</GetMethod>\n      </Link>\n      \n      <Link\n          to={'/chatwithpostmethod'}\n        >\n        <PostMethod>Post query</PostMethod>\n      </Link>\n    </QueryMethodsWrapper>\n  )\n}\n","import React, { useState, useRef } from 'react';\nimport { ChatWithGetMethod } from 'components/Chats/ChatWithGetMethod/ChatWithGetMethod';\nimport { ChatWithPostMethod } from 'components/Chats/ChatWithPostMethod/ChatWithPostMethod';\nimport { LoginPage } from 'AppStyles';\nimport { LoginForm } from 'components/LoginForm';\nimport { getUniqueID } from 'helpers';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { QueryMethods } from 'components/QueryMethods';\n\nexport default function App() {\n  const [userName, setUserName] = useState('');\n  const refId = useRef(getUniqueID());\n\n  return (\n    <Switch>\n      <Route path=\"/chatwithgetmethod\">\n        <ChatWithGetMethod id={refId.current} userName={userName} />\n      </Route>\n\n      <Route path=\"/chatwithpostmethod\">\n        <ChatWithPostMethod id={refId.current} userName={userName} />\n      </Route>\n\n      <Route path=\"/querymethods\">\n        <QueryMethods />\n      </Route>\n\n      <Route path=\"/login\">\n        <LoginPage>\n          <LoginForm setUserName={setUserName} />\n        </LoginPage>\n      </Route>\n\n      <Redirect path=\"/\" to=\"/Login\" />\n    </Switch>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createGlobalStyle } from 'styled-components';\nimport App from 'App';\n\nconst Global = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n  }\n`;\n\nReactDOM.render(\n  <BrowserRouter>\n    <Global />\n    <App />\n    </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}